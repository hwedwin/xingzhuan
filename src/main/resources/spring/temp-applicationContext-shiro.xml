<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 设置自定义Realm -->
        <property name="authenticator" ref="authenticator"></property>
        <property name="realms">
        	<list>
        		<ref bean="factoryRealm"/>
        		<ref bean="agencyRealm" />
        		<ref bean="guestRealm" />
        		<ref bean="systemRealm" />
        	</list>
        </property>
		<!--将缓存管理器，交给安全管理器-->
		<!-- <property name="cacheManager" ref="redisCacheManager" /> -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="sessionManager" ref="sessionManager" />
    </bean>
	
	<!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="com.fg.cloud.framework.shiro.realm.CustomModularRealmAuthenticator">
        <property name="definedRealms">    
            <map>    
                <entry key="agency" value-ref="agencyRealm" />
                <entry key="factory" value-ref="factoryRealm" />
                <entry key="guest" value-ref="guestRealm" />
                <!-- 系统用户 -->
                <entry key="system" value-ref="systemRealm" />
            </map>   
        </property>
        <property name="authenticationStrategy">    
            <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy" />
            <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
            <!-- <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy" /> -->
        </property>
    </bean>
    
	<!-- 项目自定义的Realm -->
	<bean id="agencyRealm" class="com.fg.cloud.framework.shiro.realm.AgencyRealm">
		<property name="cachingEnabled" value="true" />
		<!-- <property name="cacheManager" ref="redisCacheManager"></property> -->
	</bean>
    <bean id="factoryRealm" class="com.fg.cloud.framework.shiro.realm.FactoryRealm">
    	<property name="cachingEnabled" value="true" />
    	<!-- <property name="cacheManager" ref="redisCacheManager"></property> -->
	</bean>
	<!-- 系统用户 -->
	<bean id="systemRealm" class="com.fg.cloud.framework.shiro.realm.SystemRealm">
    	<property name="cachingEnabled" value="true" />
	</bean>
	<bean id="guestRealm" class="com.fg.cloud.framework.shiro.realm.GuestRealm"></bean>
	
	<!-- form表单过滤器 -->
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">  
	    <property name="usernameParam" value="username"/>  
	    <property name="passwordParam" value="password"/>  
	    <property name="rememberMeParam" value="rememberMe"/>
	</bean>
	
	<!-- Shiro 自定义过滤器 -->
	<bean id="anyRolesFilter" class="com.fg.cloud.framework.shiro.AnyRolesAuthorizationFilter"></bean>
	<!-- Shiro 自定义过滤器 -->
	<bean id="resourceUserFilter" class="com.fg.cloud.framework.shiro.ResourceCheckFilter"></bean>
    <!-- Shiro 过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 默认的登陆访问url -->
        <property name="loginUrl" value="/sessionFailure"/>
        <!-- 登陆成功后跳转的url -->
        <!-- <property name="successUrl" value="/sessionFailure"/> -->
        <!-- 没有权限跳转的url -->
        <property name="unauthorizedUrl" value="/permissionsFailure"/>
        <property name="filters">
			<map>
				<entry key="anyRoles" value-ref="anyRolesFilter"/>
				<entry key="session" value-ref="resourceUserFilter"/>
				<entry key="authc" value-ref="formAuthenticationFilter"/>
			</map>    
        </property>    
        <property name="filterChainDefinitions">
            <value>
            	<!-- /qiniu/** = anon -->
            	/ = anon
                /login = anon
                /tologin = anon
                /factoryLogin = anon
                /agencyLogin = anon
                /loginout = anon
                /aliPay/tofind = anon
                /sessionFailure = anon
                /permissionsFailure = anon
                /error/** = anon
                /agencyNews/** user
                /agencyFac/** = user
                <!-- 拦截器 -->
                /menu/** = roles[factory]
                 <!-- /agency/** = authc sessionFail需要认证 authc-->
                 <!-- 系统平台放行策略 -->
                /commons/** = anon 
                /js/** = anon
                /css/** = anon
                /** = user,authc <!-- user -->
                /resetPsd = anon
            </value>
        </property>
    </bean>
    
    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<!-- 需要时开启 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="com.fg.cloud.session.id"/>
        <property name="httpOnly" value="true"/>  
        <property name="maxAge" value="1800000"/>
	</bean>
	
	<!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
    <!-- 会话DAO -->  
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">  
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>  
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    
    <!-- 会话管理器 1800000-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    	<property name="globalSessionTimeout" value="18000000"/>
        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
		<property name="sessionValidationInterval" value="1200000"/>
		<!-- <property name="sessionValidationSchedulerEnabled" value="true"/> -->
		
		<property name="deleteInvalidSessions" value="true"/>  
        <property name="sessionValidationSchedulerEnabled" value="true"/>  
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
        
        <property name="sessionDAO" ref="sessionDAO"/>
		<!-- 自定义cookie id 需要时开启-->	
		<property name="sessionIdCookieEnabled" value="true"/>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    
    <!-- 会话验证调度器 1800000-->  
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">  
        <property name="sessionValidationInterval" value="1800000"/>  
        <property name="sessionManager" ref="sessionManager"/>  
    </bean>
	
	<!-- redisSessionDAO 需要时启用-->
	<!-- <bean id="sessionDAO" class="com.djt.common.shiro.cache.RedisSessionDAO">
	    <property name="redisManager" ref="redisManager" />
	</bean> -->
	
	<!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    
    <!-- 启用shrio授权注解拦截方式 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager"/>  
    </bean>
    
    <!-- AOP式方法级权限检查  -->
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true" />
    </bean>
    
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- rememberMe管理器 rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('9FvVhtFLUs0KnA3Kprsdyg==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <!-- rememberMe-cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="rememberMe"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="2592000"/><!-- 30天 -->  
	</bean>
	
	<!-- 用户缓存 -->
	<!-- <bean id="customShiroCacheManager" class="com.sojson.core.shiro.cache.impl.CustomShiroCacheManager">
	    <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean> -->
	
	<!-- 缓存管理器 -->  
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
		<property name="cacheManagerConfigFile" value="classpath:spring/ehcache-shiro.xml"/>  
	</bean>

	<bean id="memoryCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/> -->
	
	<!-- <import resource="ehcache-shiro.xml"/> -->
	
	<!-- <import resource="classpath:spring/shiro-config-redis.xml"/> -->

	
</beans>